const { Telegraf, session, Markup } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');
const express = require('express');
const axios = require('axios');
const NodeCache = require('node-cache');

// ==================[ ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿßŸàŸÑ€åŸá ]==================
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY;
const PORT = process.env.PORT || 3000;
const OWNER_ID = process.env.OWNER_ID;
const API_SECRET_KEY = process.env.API_SECRET_KEY;
const BOT_INSTANCES = process.env.BOT_INSTANCES ? JSON.parse(process.env.BOT_INSTANCES) : [];
const SELF_BOT_ID = process.env.SELF_BOT_ID || 'trigger_1';
const SYNC_ENABLED = process.env.SYNC_ENABLED === 'true';

// ⁄©ÿ¥ Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá ÿ®ÿ±ÿß€å ÿ™ÿ±€å⁄Øÿ±Ÿáÿß
const cache = new NodeCache({ 
  stdTTL: 600,        // 10 ÿØŸÇ€åŸÇŸá
  checkperiod: 120,
  maxKeys: 10000
});

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
const bot = new Telegraf(BOT_TOKEN);
const app = express();

app.use(express.json());

// ÿ≥ÿ¥ŸÜ ÿ®ÿ±ÿß€å ÿ™ŸÜÿ∏€åŸÖ ÿ™ÿ±€å⁄Øÿ±
bot.use(session({
  defaultSession: () => ({
    settingTrigger: false,
    triggerType: null,
    step: null,
    delay: null,
    chatId: null
  })
}));

// ==================[ Ÿæ€åŸÜ⁄Ø ÿÆŸàÿØ⁄©ÿßÿ± ]==================
const startAutoPing = () => {
  if (!process.env.RENDER_EXTERNAL_URL) return;

  const PING_INTERVAL = 13 * 60 * 1000 + 59 * 1000;
  const selfUrl = process.env.RENDER_EXTERNAL_URL;

  const performPing = async () => {
    try {
      await axios.get(`${selfUrl}/ping`, { timeout: 10000 });
    } catch (error) {
      setTimeout(performPing, 2 * 60 * 1000);
    }
  };

  setTimeout(performPing, 30000);
  setInterval(performPing, PING_INTERVAL);
};

app.get('/ping', (req, res) => {
  res.status(200).json({
    status: 'active',
    botId: SELF_BOT_ID,
    timestamp: new Date().toISOString()
  });
});

// ==================[ ÿ™Ÿàÿßÿ®ÿπ ÿ®Ÿá€åŸÜŸá‚Äåÿ¥ÿØŸá ÿ®ÿß ⁄©ÿ¥ ]==================
const formatTime = (seconds) => {
  if (seconds < 60) return `${seconds} ÿ´ÿßŸÜ€åŸá`;
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return remainingSeconds === 0 ? `${minutes} ÿØŸÇ€åŸÇŸá` : `${minutes} ÿØŸÇ€åŸÇŸá Ÿà ${remainingSeconds} ÿ´ÿßŸÜ€åŸá`;
};

const checkUserAccess = async (ctx) => {
  try {
    if (ctx.from.id.toString() === OWNER_ID) return { hasAccess: true, isOwner: true };
    if (ctx.chat.type === 'private') return { hasAccess: false, reason: 'ÿß€åŸÜ ÿØÿ≥ÿ™Ÿàÿ± ŸÅŸÇÿ∑ ÿØÿ± ⁄Øÿ±ŸàŸá ⁄©ÿßÿ± ŸÖ€å‚Äå⁄©ŸÜÿØ' };

    const member = await ctx.getChatMember(ctx.from.id);
    if (member.status === 'creator') return { hasAccess: true, isCreator: true };
    if (member.status === 'administrator') return { hasAccess: true, isAdmin: true };

    return { hasAccess: false, reason: 'ÿ¥ŸÖÿß ÿßÿØŸÖ€åŸÜ ŸÜ€åÿ≥ÿ™€åÿØ' };
  } catch (error) {
    return { hasAccess: false, reason: 'ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿ±ÿ±ÿ≥€å ÿØÿ≥ÿ™ÿ±ÿ≥€å' };
  }
};

// ==================[ ÿ™Ÿàÿßÿ®ÿπ ÿ¢ÿ≤ÿßÿØÿ≥ÿßÿ≤€å - ÿ®ÿß ⁄©ÿ¥ ]==================
const releaseUserFromQuarantine = async (userId) => {
  try {
    if (!SYNC_ENABLED) {
      return false;
    }

    // ⁄©ÿ¥ ÿ®ÿ±ÿß€å ŸÜÿ™ÿß€åÿ¨ ÿ¢ÿ≤ÿßÿØÿ≥ÿßÿ≤€å
    const cacheKey = `release:${userId}`;
    const cachedResult = cache.get(cacheKey);
    if (cachedResult !== undefined) {
      console.log(`‚úÖ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ⁄©ÿ¥ ÿ®ÿ±ÿß€å ÿ¢ÿ≤ÿßÿØÿ≥ÿßÿ≤€å ⁄©ÿßÿ±ÿ®ÿ± ${userId}`);
      return cachedResult;
    }

    const quarantineBots = BOT_INSTANCES.filter(bot => bot.type === 'quarantine');
    let successCount = 0;

    // ÿ∫€åÿ±ŸáŸÖÿ≤ŸÖÿßŸÜ ÿßÿ¨ÿ±ÿß ⁄©ŸÜ ÿ™ÿß Egress ⁄©ŸÖÿ™ÿ±€å ŸÖÿµÿ±ŸÅ ÿ¥Ÿá
    const promises = quarantineBots.map(async (botInstance) => {
      try {
        let apiUrl = botInstance.url;
        if (!apiUrl.startsWith('http')) apiUrl = `https://${apiUrl}`;
        
        await axios.post(`${apiUrl}/api/release-user`, {
          userId: userId,
          secretKey: botInstance.secretKey || API_SECRET_KEY,
          sourceBot: SELF_BOT_ID
        }, { timeout: 5000 });
        
        return true;
      } catch (error) {
        return false;
      }
    });

    const results = await Promise.allSettled(promises);
    successCount = results.filter(r => r.status === 'fulfilled' && r.value === true).length;

    const finalResult = successCount > 0;
    // ŸÜÿ™€åÿ¨Ÿá ÿ±Ÿà ÿØÿ± ⁄©ÿ¥ ÿ∞ÿÆ€åÿ±Ÿá ⁄©ŸÜ (2 ÿØŸÇ€åŸÇŸá)
    cache.set(cacheKey, finalResult, 120);
    
    return finalResult;
  } catch (error) {
    return false;
  }
};

// ==================[ ÿ™ÿßÿ®ÿπ handleTrigger - ÿ®ÿß ⁄©ÿ¥ ]==================
const handleTrigger = async (ctx, triggerType) => {
  try {
    if (ctx.chat.type === 'private') return;

    const userName = ctx.from.first_name || 'ŸÜÿßÿ¥ŸÜÿßÿ≥';
    const chatTitle = ctx.chat.title || '⁄Øÿ±ŸàŸá ŸÜÿßÿ¥ŸÜÿßÿÆÿ™Ÿá';
    
    if (triggerType === 'ÿÆÿ±Ÿàÿ¨') {
      const exitMessage = `üß≠‚îäÿ≥ŸÅÿ± ÿ®Ÿá ÿ≥ŸÑÿßŸÖÿ™ ${userName}`;
      await ctx.reply(exitMessage, { 
        reply_to_message_id: ctx.message.message_id,
        ...createGlassButton()
      });
      return;
    }
    
    // üîç ÿßŸàŸÑ ÿßÿ≤ ⁄©ÿ¥ ÿ™ÿ±€å⁄Øÿ±Ÿáÿß ÿ±Ÿà ÿ®⁄Ø€åÿ±
    const cacheKey = `trigger:${ctx.chat.id}:${triggerType}`;
    let triggerData = cache.get(cacheKey);
    
    if (!triggerData) {
      // ÿß⁄Øÿ± ÿØÿ± ⁄©ÿ¥ ŸÜÿ®ŸàÿØÿå ÿßÿ≤ ÿØ€åÿ™ÿßÿ®€åÿ≥ ÿ®⁄Ø€åÿ±
      try {
        const { data } = await supabase
          .from('triggers')
          .select('delay, delayed_message, message_entities')
          .eq('chat_id', ctx.chat.id)
          .eq('trigger_type', triggerType)
          .single();

        if (data) {
          triggerData = data;
          cache.set(cacheKey, data, 600); // 10 ÿØŸÇ€åŸÇŸá
        }
      } catch (error) {
        // ÿÆÿ∑ÿß ÿ±Ÿà ŸÑÿß⁄Ø ŸÜ⁄©ŸÜ ÿ™ÿß Egress ⁄©ŸÖÿ™ÿ±€å ŸÖÿµÿ±ŸÅ ÿ®ÿ¥Ÿá
      }
    }

    const delay = triggerData?.delay || 5;
    const delayedMessage = triggerData?.delayed_message || 'ÿπŸÖŸÑ€åÿßÿ™ ÿ™⁄©ŸÖ€åŸÑ ÿ¥ÿØ! ‚úÖ';
    const messageEntities = triggerData?.message_entities;

    const formattedTime = formatTime(delay);
    const triggerEmoji = triggerType === 'Ÿàÿ±ŸàÿØ' ? 'üé¥' : triggerType === 'ŸÖÿßÿ¥€åŸÜ' ? 'üöó' : 'üèçÔ∏è';
    
    let initialMessage;
    if (triggerType === 'Ÿàÿ±ŸàÿØ') {
      initialMessage = `${triggerEmoji}‚îäŸæŸÑ€åÿ± ${userName} Ÿàÿßÿ±ÿØ ŸÖŸÜÿ∑ŸÇŸá ${chatTitle} ÿ¥ÿØ€åÿØ\n\n‚è≥‚îäÿ≤ŸÖÿßŸÜ ÿ≥ŸÅÿ± ÿ¥ŸÖÿß ${formattedTime}`;
    } else if (triggerType === 'ŸÖÿßÿ¥€åŸÜ') {
      initialMessage = `${triggerEmoji}‚îäŸÖÿßÿ¥€åŸÜ ${userName} Ÿàÿßÿ±ÿØ ⁄Øÿßÿ±ÿß⁄ò ÿ¥ÿØ\n\n‚è≥‚îäÿ≤ŸÖÿßŸÜ ÿ¢ŸÖÿßÿØŸá ÿ≥ÿßÿ≤€å ${formattedTime}`;
    } else {
      initialMessage = `${triggerEmoji}‚îäŸÖŸàÿ™Ÿàÿ± ${userName} Ÿàÿßÿ±ÿØ ⁄Øÿßÿ±ÿß⁄ò ÿ¥ÿØ\n\n‚è≥‚îäÿ≤ŸÖÿßŸÜ ÿ¢ŸÖÿßÿØŸá ÿ≥ÿßÿ≤€å ${formattedTime}`;
    }

    await ctx.reply(initialMessage, { 
      reply_to_message_id: ctx.message.message_id,
      ...createGlassButton()
    });

    setTimeout(async () => {
      try {
        const messageOptions = {
          reply_to_message_id: ctx.message.message_id,
          ...createGlassButton(),
          disable_web_page_preview: true
        };
        
        if (messageEntities && messageEntities.length > 0) {
          messageOptions.entities = messageEntities;
        }
        
        await ctx.telegram.sendMessage(ctx.chat.id, delayedMessage, messageOptions);
        
        // ÿ¢ÿ≤ÿßÿØÿ≥ÿßÿ≤€å ⁄©ÿßÿ±ÿ®ÿ± ÿßÿ≤ ŸÇÿ±ŸÜÿ∑€åŸÜŸá
        await releaseUserFromQuarantine(ctx.from.id);
        
      } catch (error) {
        // ÿÆÿ∑ÿß ÿ±Ÿà ŸÑÿß⁄Ø ŸÜ⁄©ŸÜ
      }
    }, delay * 1000);
  } catch (error) {
    // ÿÆÿ∑ÿß€å ÿßÿµŸÑ€å ÿ±Ÿà ŸÑÿß⁄Ø ⁄©ŸÜ
    console.error(`‚ùå ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ #${triggerType}:`, error);
  }
};

// ==================[ ÿØ⁄©ŸÖŸá ÿ¥€åÿ¥Ÿá‚Äåÿß€å ]==================
const createGlassButton = () => {
  return Markup.inlineKeyboard([
    Markup.button.callback('ùêÑùêúùê•ùê¢ùê¨ ùêñùê®ùê´ùê•ùêù', 'show_glass_message')
  ]);
};

bot.action('show_glass_message', async (ctx) => {
  try {
    const messageText = ctx.update.callback_query.message.text;
    let alertMessage = 'ÿ®Ÿá ÿØŸÜ€åÿß€å ÿß⁄©ŸÑ€åÿ≥ ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ!';
    
    if (messageText.includes('Ÿàÿ±ŸàÿØ') || messageText.includes('ŸÖÿßÿ¥€åŸÜ') || messageText.includes('ŸÖŸàÿ™Ÿàÿ±')) {
      alertMessage = messageText.includes('ÿ≤ŸÖÿßŸÜ ÿ≥ŸÅÿ±') || messageText.includes('ÿ≤ŸÖÿßŸÜ ÿ¢ŸÖÿßÿØŸá ÿ≥ÿßÿ≤€å') 
        ? 'ŸÖÿØÿ™ ÿ≤ŸÖÿßŸÜ ÿ¥ŸÖÿß ÿ™ÿß ÿØÿ±€åÿßŸÅÿ™ ÿ®ŸÇ€åŸá ŸÖÿ≥€åÿ± Ÿáÿß' 
        : 'ŸÖÿ≥€åÿ± Ÿáÿß€å ÿ¥ŸÖÿß ÿ®ÿ±ÿß€å ÿ±ŸÅÿ™ŸÜ ÿ®Ÿá ŸÖ⁄©ÿßŸÜ ÿ®ÿπÿØ€å';
    } else if (messageText.includes('ÿÆÿ±Ÿàÿ¨') || messageText.includes('ÿ≥ŸÅÿ± ÿ®Ÿá ÿ≥ŸÑÿßŸÖÿ™')) {
      alertMessage = 'ÿ®Ÿá ŸÖÿ≥€åÿ± Ÿáÿß€å€å ⁄©Ÿá ÿßŸÜÿ™ÿÆÿßÿ® ŸÖ€å⁄©ŸÜ€åŸÜ ÿå ÿØŸÇÿ™ ⁄©ŸÜ€åŸÜ ÿå ÿ¥ÿß€åÿØ ÿÆÿ∑ÿ±€å ÿ¥ŸÖÿßÿ±ÿß ÿ™ŸáÿØ€åÿØ ⁄©ŸÜÿØ...';
    }
    
    await ctx.answerCbQuery(alertMessage, { show_alert: true });
  } catch (error) {
    await ctx.answerCbQuery('‚ö†Ô∏è ÿÆÿ∑ÿß€å€å ÿ±ÿÆ ÿØÿßÿØ!', { show_alert: true });
  }
});

// ==================[ ÿØÿ≥ÿ™Ÿàÿ±ÿßÿ™ ÿ±ÿ®ÿßÿ™ ]==================
bot.start((ctx) => {
  ctx.reply('ÿßŸàŸæÿ±ÿßÿ™Ÿàÿ± ÿß⁄©ŸÑ€åÿ≥ ÿØÿ±ÿÆÿØŸÖÿ™ ÿ¥ŸÖÿßÿ≥ÿ™ ü•∑üèª');
});

bot.command('help', (ctx) => {
  ctx.reply(`
ü§ñ ÿ±ÿßŸáŸÜŸÖÿß€å ÿ±ÿ®ÿßÿ™ ÿß⁄©ŸÑ€åÿ≥ - ŸÜÿ≥ÿÆŸá ŸÖÿØ€åÿ±€åÿ™€å

/start - ÿ¥ÿ±Ÿàÿπ ⁄©ÿßÿ± ÿ®ÿß ÿ±ÿ®ÿßÿ™
/status - ÿ®ÿ±ÿ±ÿ≥€å Ÿàÿ∂ÿπ€åÿ™ ÿ±ÿ®ÿßÿ™ ÿØÿ± ⁄Øÿ±ŸàŸá
/set_t1 - ÿ™ŸÜÿ∏€åŸÖ ÿ™ÿ±€å⁄Øÿ± ÿ®ÿ±ÿß€å #Ÿàÿ±ŸàÿØ
/set_t2 - ÿ™ŸÜÿ∏€åŸÖ ÿ™ÿ±€å⁄Øÿ± ÿ®ÿ±ÿß€å #ŸÖÿßÿ¥€åŸÜ  
/set_t3 - ÿ™ŸÜÿ∏€åŸÖ ÿ™ÿ±€å⁄Øÿ± ÿ®ÿ±ÿß€å #ŸÖŸàÿ™Ÿàÿ±
/help - ŸÜŸÖÿß€åÿ¥ ÿß€åŸÜ ÿ±ÿßŸáŸÜŸÖÿß

#Ÿàÿ±ŸàÿØ - ŸÅÿπÿßŸÑ ⁄©ÿ±ÿØŸÜ ÿ™ÿ±€å⁄Øÿ± Ÿàÿ±ŸàÿØ
#ŸÖÿßÿ¥€åŸÜ - ŸÅÿπÿßŸÑ ⁄©ÿ±ÿØŸÜ ÿ™ÿ±€å⁄Øÿ± ŸÖÿßÿ¥€åŸÜ
#ŸÖŸàÿ™Ÿàÿ± - ŸÅÿπÿßŸÑ ⁄©ÿ±ÿØŸÜ ÿ™ÿ±€å⁄Øÿ± ŸÖŸàÿ™Ÿàÿ±
#ÿÆÿ±Ÿàÿ¨ - ÿÆÿ±Ÿàÿ¨ ÿßÿ≤ ŸÖŸÜÿ∑ŸÇŸá
  `);
});

bot.command('status', async (ctx) => {
  try {
    const userAccess = await checkUserAccess(ctx);
    if (!userAccess.hasAccess) {
      ctx.reply(`‚ùå ${userAccess.reason}`);
      return;
    }

    let triggerInfo = '\n‚öôÔ∏è ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ™ÿ±€å⁄Øÿ±Ÿáÿß:';
    
    // ÿßÿ≤ ⁄©ÿ¥ ÿ™ÿ±€å⁄Øÿ±Ÿáÿß ÿ±Ÿà ÿ®⁄Ø€åÿ±
    const chatTriggersCache = cache.get(`triggers:${ctx.chat.id}`);
    if (chatTriggersCache) {
      chatTriggersCache.forEach(trigger => {
        const emoji = trigger.trigger_type === 'Ÿàÿ±ŸàÿØ' ? 'üö™' : 
                     trigger.trigger_type === 'ŸÖÿßÿ¥€åŸÜ' ? 'üöó' : 'üèçÔ∏è';
        triggerInfo += `\n${emoji} #${trigger.trigger_type}: ${formatTime(trigger.delay)}`;
      });
    } else {
      // ÿß⁄Øÿ± ÿØÿ± ⁄©ÿ¥ ŸÜÿ®ŸàÿØÿå ÿßÿ≤ ÿØ€åÿ™ÿßÿ®€åÿ≥ ÿ®⁄Ø€åÿ±
      try {
        const { data: triggers } = await supabase
          .from('triggers')
          .select('trigger_type, delay')
          .eq('chat_id', ctx.chat.id);

        if (triggers && triggers.length > 0) {
          triggers.forEach(trigger => {
            const emoji = trigger.trigger_type === 'Ÿàÿ±ŸàÿØ' ? 'üö™' : 
                         trigger.trigger_type === 'ŸÖÿßÿ¥€åŸÜ' ? 'üöó' : 'üèçÔ∏è';
            triggerInfo += `\n${emoji} #${trigger.trigger_type}: ${formatTime(trigger.delay)}`;
          });
          // ÿØÿ± ⁄©ÿ¥ ÿ∞ÿÆ€åÿ±Ÿá ⁄©ŸÜ
          cache.set(`triggers:${ctx.chat.id}`, triggers, 600);
        } else {
          triggerInfo += '\n‚ùå Ÿá€å⁄Ü ÿ™ÿ±€å⁄Øÿ±€å ÿ™ŸÜÿ∏€åŸÖ ŸÜÿ¥ÿØŸá ÿßÿ≥ÿ™';
        }
      } catch (error) {
        triggerInfo += '\n‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™';
      }
    }

    ctx.reply(`
ü§ñ Ÿàÿ∂ÿπ€åÿ™ ÿ±ÿ®ÿßÿ™ ÿØÿ± ÿß€åŸÜ ⁄Øÿ±ŸàŸá:
${triggerInfo}

üîó Ÿàÿ∂ÿπ€åÿ™ ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ®ÿß ÿ±ÿ®ÿßÿ™‚ÄåŸáÿß€å ŸÇÿ±ŸÜÿ∑€åŸÜŸá: ${SYNC_ENABLED ? 'ŸÅÿπÿßŸÑ' : 'ÿ∫€åÿ±ŸÅÿπÿßŸÑ'}
    `);
  } catch (error) {
    ctx.reply('‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿ±ÿ±ÿ≥€å Ÿàÿ∂ÿπ€åÿ™');
  }
});

// ==================[ ÿØÿ≥ÿ™Ÿàÿ±ÿßÿ™ ÿ™ŸÜÿ∏€åŸÖ ÿ™ÿ±€å⁄Øÿ± ]==================
const setupTrigger = async (ctx, triggerType) => {
  try {
    const userAccess = await checkUserAccess(ctx);
    if (!userAccess.hasAccess) {
      ctx.reply(`‚ùå ${userAccess.reason}`);
      return;
    }

    ctx.session.settingTrigger = true;
    ctx.session.triggerType = triggerType;
    ctx.session.step = 'delay';
    ctx.session.chatId = ctx.chat.id;

    const triggerEmoji = triggerType === 'Ÿàÿ±ŸàÿØ' ? 'üö™' : triggerType === 'ŸÖÿßÿ¥€åŸÜ' ? 'üöó' : 'üèçÔ∏è';
    await ctx.reply(`${triggerEmoji} ÿ™ŸÜÿ∏€åŸÖ ÿ™ÿ±€å⁄Øÿ± ÿ®ÿ±ÿß€å #${triggerType}\n\n‚è∞ ŸÑÿ∑ŸÅÿßŸã ÿ≤ŸÖÿßŸÜ ÿ™ÿ£ÿÆ€åÿ± ÿ±ÿß ÿ®Ÿá ÿ´ÿßŸÜ€åŸá Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:`);
  } catch (error) {
    ctx.reply('‚ùå ÿÆÿ∑ÿß€å€å ÿØÿ± ÿ™ŸÜÿ∏€åŸÖ ÿ™ÿ±€å⁄Øÿ± ÿ±ÿÆ ÿØÿßÿØ.');
  }
};

bot.command('set_t1', (ctx) => setupTrigger(ctx, 'Ÿàÿ±ŸàÿØ'));
bot.command('set_t2', (ctx) => setupTrigger(ctx, 'ŸÖÿßÿ¥€åŸÜ'));
bot.command('set_t3', (ctx) => setupTrigger(ctx, 'ŸÖŸàÿ™Ÿàÿ±'));

// ==================[ Ÿæÿ±ÿØÿßÿ≤ÿ¥ Ÿæ€åÿßŸÖ‚ÄåŸáÿß ]==================
bot.on('text', async (ctx) => {
  try {
    const messageText = ctx.message.text;
    
    if (messageText.includes('#Ÿàÿ±ŸàÿØ')) {
      await handleTrigger(ctx, 'Ÿàÿ±ŸàÿØ');
    }
    if (messageText.includes('#ŸÖÿßÿ¥€åŸÜ')) {
      await handleTrigger(ctx, 'ŸÖÿßÿ¥€åŸÜ');
    }
    if (messageText.includes('#ŸÖŸàÿ™Ÿàÿ±')) {
      await handleTrigger(ctx, 'ŸÖŸàÿ™Ÿàÿ±');
    }
    if (messageText.includes('#ÿÆÿ±Ÿàÿ¨')) {
      await handleTrigger(ctx, 'ÿÆÿ±Ÿàÿ¨');
    }

    // Ÿæÿ±ÿØÿßÿ≤ÿ¥ ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ™ÿ±€å⁄Øÿ±
    if (!ctx.session.settingTrigger) return;

    const userAccess = await checkUserAccess(ctx);
    if (!userAccess.hasAccess) {
      ctx.reply(`‚ùå ${userAccess.reason}`);
      ctx.session.settingTrigger = false;
      return;
    }

    if (ctx.session.step === 'delay') {
      const delay = parseInt(ctx.message.text);
      if (isNaN(delay) || delay <= 0 || delay > 3600) {
        ctx.reply('‚ùå ŸÑÿ∑ŸÅÿßŸã €å⁄© ÿπÿØÿØ ŸÖÿπÿ™ÿ®ÿ± ÿ®€åŸÜ 1 ÿ™ÿß 3600 ÿ´ÿßŸÜ€åŸá Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ');
        return;
      }

      ctx.session.delay = delay;
      ctx.session.step = 'message';
      
      const triggerEmoji = ctx.session.triggerType === 'Ÿàÿ±ŸàÿØ' ? 'üö™' : 
                          ctx.session.triggerType === 'ŸÖÿßÿ¥€åŸÜ' ? 'üöó' : 'üèçÔ∏è';
      
      await ctx.reply(`${triggerEmoji} ÿ≤ŸÖÿßŸÜ ÿ™ÿ£ÿÆ€åÿ± ÿ´ÿ®ÿ™ ÿ¥ÿØ: ${formatTime(delay)}\n\nüìù ÿ≠ÿßŸÑÿß Ÿæ€åÿßŸÖ ÿ™ÿ£ÿÆ€åÿ±€å ÿ±ÿß ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ:`);
    } else if (ctx.session.step === 'message') {
      try {
        const messageEntities = ctx.message.entities || [];
        
        await supabase
          .from('triggers')
          .delete()
          .eq('chat_id', ctx.session.chatId)
          .eq('trigger_type', ctx.session.triggerType);

        await supabase.from('triggers').insert({
          chat_id: ctx.session.chatId,
          trigger_type: ctx.session.triggerType,
          delay: ctx.session.delay,
          delayed_message: ctx.message.text,
          message_entities: messageEntities,
          updated_at: new Date().toISOString(),
          set_by: ctx.from.id,
          set_by_username: ctx.from.username || ctx.from.first_name
        });

        // ⁄©ÿ¥ ÿ±Ÿà Ÿæÿß⁄© ⁄©ŸÜ
        cache.del(`trigger:${ctx.session.chatId}:${ctx.session.triggerType}`);
        cache.del(`triggers:${ctx.session.chatId}`);

        const triggerEmoji = ctx.session.triggerType === 'Ÿàÿ±ŸàÿØ' ? 'üö™' : 
                            ctx.session.triggerType === 'ŸÖÿßÿ¥€åŸÜ' ? 'üöó' : 'üèçÔ∏è';
        
        ctx.reply(`${triggerEmoji} ÿ™ÿ±€å⁄Øÿ± #${ctx.session.triggerType} ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ™ŸÜÿ∏€åŸÖ ÿ¥ÿØ!\n\n‚úÖ ÿ™ÿ±€å⁄Øÿ± ŸÇÿ®ŸÑ€å ÿ¨ÿß€å⁄Øÿ≤€åŸÜ ÿ¥ÿØ.`);
      } catch (error) {
        ctx.reply('‚ùå ÿÆÿ∑ÿß€å€å ÿØÿ± ÿ∞ÿÆ€åÿ±Ÿá ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ±ÿÆ ÿØÿßÿØ.');
      }

      ctx.session.settingTrigger = false;
    }
  } catch (error) {
    console.error('ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ Ÿæ€åÿßŸÖ:', error);
  }
});

// ==================[ endpointŸáÿß€å API ÿ®ÿ±ÿß€å ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ®ÿß ÿ±ÿ®ÿßÿ™‚ÄåŸáÿß€å ŸÇÿ±ŸÜÿ∑€åŸÜŸá ]==================
app.post('/api/check-quarantine', async (req, res) => {
  try {
    const { secretKey } = req.body;
    
    if (!secretKey || secretKey !== API_SECRET_KEY) {
      return res.status(401).json({ error: 'Unauthorized' });
    }
    
    // ÿ±ÿ®ÿßÿ™ ÿ™ÿ±€å⁄Øÿ± ⁄©ÿßÿ±ÿ®ÿ± ÿ±Ÿà ŸÇÿ±ŸÜÿ∑€åŸÜŸá ŸÜŸÖ€å‚Äå⁄©ŸÜŸá
    res.status(200).json({ 
      isQuarantined: false,
      botId: SELF_BOT_ID,
      note: 'ÿß€åŸÜ ÿ±ÿ®ÿßÿ™ ÿ™ÿ±€å⁄Øÿ± ÿßÿ≥ÿ™ Ÿà ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ±ÿß ŸÇÿ±ŸÜÿ∑€åŸÜŸá ŸÜŸÖ€å‚Äå⁄©ŸÜÿØ'
    });
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.post('/api/sync-user', async (req, res) => {
  try {
    const { secretKey } = req.body;
    
    if (!secretKey || secretKey !== API_SECRET_KEY) {
      return res.status(401).json({ error: 'Unauthorized' });
    }
    
    // ŸÅŸÇÿ∑ ÿ™ÿ£€å€åÿØ ⁄©ŸÜ ⁄©Ÿá ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿØÿ±€åÿßŸÅÿ™ ÿ¥ÿØŸá
    res.status(200).json({ 
      success: true,
      botId: SELF_BOT_ID,
      message: 'ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿØÿ±€åÿßŸÅÿ™ ÿ¥ÿØ'
    });
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.post('/api/release-user', async (req, res) => {
  try {
    const { userId, secretKey } = req.body;
    
    if (!secretKey || secretKey !== API_SECRET_KEY) {
      return res.status(401).json({ error: 'Unauthorized' });
    }
    
    res.status(200).json({ 
      success: true,
      botId: SELF_BOT_ID,
      message: `ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿ¢ÿ≤ÿßÿØÿ≥ÿßÿ≤€å ⁄©ÿßÿ±ÿ®ÿ± ${userId} ÿØÿ±€åÿßŸÅÿ™ ÿ¥ÿØ`
    });
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// ==================[ ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ÿ≥ÿ±Ÿàÿ± ]==================
app.use(bot.webhookCallback('/webhook'));
app.get('/', (req, res) => {
  res.send(`ü§ñ ÿ±ÿ®ÿßÿ™ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ ${SELF_BOT_ID} (ÿ™ÿ±€å⁄Øÿ±) ÿØÿ± ÿ≠ÿßŸÑ ÿßÿ¨ÿ±ÿßÿ≥ÿ™!`);
});

app.listen(PORT, () => {
  console.log(`üöÄ ÿ≥ÿ±Ÿàÿ± ÿ™ÿ±€å⁄Øÿ± ${SELF_BOT_ID} ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ÿ¥ÿØ`);
  startAutoPing();
});

// ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ÿ±ÿ®ÿßÿ™
if (process.env.RENDER_EXTERNAL_URL) {
  const webhookUrl = `${process.env.RENDER_EXTERNAL_URL}/webhook`;
  bot.telegram.setWebhook(webhookUrl)
    .then(() => console.log('‚úÖ Webhook ÿ™ŸÜÿ∏€åŸÖ ÿ¥ÿØ'))
    .catch(error => {
      console.error('‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ™ŸÜÿ∏€åŸÖ Webhook:', error);
      bot.launch();
    });
} else {
  bot.launch();
  }
